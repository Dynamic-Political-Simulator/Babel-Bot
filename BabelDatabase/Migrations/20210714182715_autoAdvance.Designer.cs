// <auto-generated />
using System;
using BabelDatabase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BabelDatabase.Migrations
{
    [DbContext(typeof(BabelContext))]
    [Migration("20210714182715_autoAdvance")]
    partial class autoAdvance
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BabelDatabase.Alignment", b =>
                {
                    b.Property<string>("AlignmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AlignmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CooperationCompetition")
                        .HasColumnType("int");

                    b.Property<int>("DemocracyAuthority")
                        .HasColumnType("int");

                    b.Property<float>("Establishment")
                        .HasColumnType("real");

                    b.Property<int>("FederalismCentralism")
                        .HasColumnType("int");

                    b.Property<int>("GlobalismIsolationism")
                        .HasColumnType("int");

                    b.Property<float>("LowerPartyModiifer")
                        .HasColumnType("real");

                    b.Property<int>("MilitarismPacifism")
                        .HasColumnType("int");

                    b.Property<int>("MonoculturalismMulticulturalism")
                        .HasColumnType("int");

                    b.Property<int>("ProgressivismTraditionalism")
                        .HasColumnType("int");

                    b.Property<int>("SecularismSpiritualism")
                        .HasColumnType("int");

                    b.Property<int>("SecurityFreedom")
                        .HasColumnType("int");

                    b.Property<float>("UpperPartyModifier")
                        .HasColumnType("real");

                    b.HasKey("AlignmentId");

                    b.ToTable("Alignments");

                    b.HasData(
                        new
                        {
                            AlignmentId = "123",
                            AlignmentName = "ULTRA COMMIE LIBERTARIANS",
                            CooperationCompetition = 3,
                            DemocracyAuthority = 1,
                            Establishment = 0f,
                            FederalismCentralism = 5,
                            GlobalismIsolationism = 0,
                            LowerPartyModiifer = 0f,
                            MilitarismPacifism = 8,
                            MonoculturalismMulticulturalism = 4,
                            ProgressivismTraditionalism = 9,
                            SecularismSpiritualism = 7,
                            SecurityFreedom = 4,
                            UpperPartyModifier = 0f
                        },
                        new
                        {
                            AlignmentId = "124",
                            AlignmentName = "ULTRA LIBERTARIAN COMMIES",
                            CooperationCompetition = 1,
                            DemocracyAuthority = 3,
                            Establishment = 0f,
                            FederalismCentralism = 2,
                            GlobalismIsolationism = 4,
                            LowerPartyModiifer = 0f,
                            MilitarismPacifism = 2,
                            MonoculturalismMulticulturalism = 3,
                            ProgressivismTraditionalism = 4,
                            SecularismSpiritualism = 0,
                            SecurityFreedom = 6,
                            UpperPartyModifier = 0f
                        });
                });

            modelBuilder.Entity("BabelDatabase.AlignmentClique", b =>
                {
                    b.Property<string>("CliqueId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AlignmentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CliqueId", "AlignmentId");

                    b.HasIndex("AlignmentId");

                    b.ToTable("AlignmentClique");
                });

            modelBuilder.Entity("BabelDatabase.AlignmentSpending", b =>
                {
                    b.Property<string>("AlignmentSpendingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AlignmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("CharacterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CliqueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GlobalTargetId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlanetTargetId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AlignmentSpendingId");

                    b.HasIndex("AlignmentId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("CliqueId");

                    b.HasIndex("GlobalTargetId");

                    b.HasIndex("PlanetTargetId");

                    b.ToTable("AlignmentSpendings");
                });

            modelBuilder.Entity("BabelDatabase.Army", b =>
                {
                    b.Property<int>("ArmyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("PlanetId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArmyId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PlanetId");

                    b.ToTable("Armies");
                });

            modelBuilder.Entity("BabelDatabase.AutoAdvance", b =>
                {
                    b.Property<string>("AutoAdvanceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AmountOfYears")
                        .HasColumnType("int");

                    b.Property<string>("ChannelId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DayExceptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastDayTriggered")
                        .HasColumnType("datetime2");

                    b.HasKey("AutoAdvanceId");

                    b.ToTable("AutoAdvance");
                });

            modelBuilder.Entity("BabelDatabase.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int>("PlanetId")
                        .HasColumnType("int");

                    b.Property<bool>("Ruined")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BuildingId");

                    b.HasIndex("PlanetId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("BabelDatabase.Character", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CauseOfDeath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CharacterBio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommitteeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DiscordUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SpeciesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("YearOfBirth")
                        .HasColumnType("int");

                    b.Property<int>("YearOfDeath")
                        .HasColumnType("int");

                    b.HasKey("CharacterId");

                    b.HasIndex("CommitteeId");

                    b.HasIndex("DiscordUserId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("BabelDatabase.CharacterDeathTimer", b =>
                {
                    b.Property<string>("CharacterDeathTimerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DeathTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("YearOfDeath")
                        .HasColumnType("int");

                    b.HasKey("CharacterDeathTimerId");

                    b.HasIndex("CharacterId")
                        .IsUnique()
                        .HasFilter("[CharacterId] IS NOT NULL");

                    b.ToTable("CharacterDeathTimers");
                });

            modelBuilder.Entity("BabelDatabase.Clique", b =>
                {
                    b.Property<string>("CliqueId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CliqueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Money")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("CliqueId");

                    b.ToTable("Cliques");
                });

            modelBuilder.Entity("BabelDatabase.CliqueInvite", b =>
                {
                    b.Property<string>("CliqueInviteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CharacterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CliqueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CliqueInviteId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("CliqueId");

                    b.ToTable("CliqueInvites");
                });

            modelBuilder.Entity("BabelDatabase.CliqueMemberCharacter", b =>
                {
                    b.Property<string>("CliqueId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MemberId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CliqueId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("CliqueMemberCharacter");
                });

            modelBuilder.Entity("BabelDatabase.CliqueOfficerCharacter", b =>
                {
                    b.Property<string>("CliqueId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OfficerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CliqueId", "OfficerId");

                    b.HasIndex("OfficerId");

                    b.ToTable("CliqueOfficerCharacter");
                });

            modelBuilder.Entity("BabelDatabase.Committee", b =>
                {
                    b.Property<string>("CommitteeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommitteeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Money")
                        .HasColumnType("bigint");

                    b.HasKey("CommitteeId");

                    b.ToTable("Committee");
                });

            modelBuilder.Entity("BabelDatabase.CustomSpending", b =>
                {
                    b.Property<string>("CustomSpendingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("CharacterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CliqueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SpendingDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomSpendingId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("CliqueId");

                    b.ToTable("CustomSpendings");
                });

            modelBuilder.Entity("BabelDatabase.Data", b =>
                {
                    b.Property<string>("DataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BaseGdpPerPop")
                        .HasColumnType("int");

                    b.Property<string>("Stratas")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DataId");

                    b.ToTable("Data");
                });

            modelBuilder.Entity("BabelDatabase.DiscordUser", b =>
                {
                    b.Property<string>("DiscordUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActiveCharacterId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiscordUserId");

                    b.ToTable("DiscordUsers");

                    b.HasData(
                        new
                        {
                            DiscordUserId = "75968535074967552",
                            IsAdmin = true,
                            UserName = "Obi"
                        },
                        new
                        {
                            DiscordUserId = "222825184887963648",
                            IsAdmin = true,
                            UserName = "Grindor"
                        });
                });

            modelBuilder.Entity("BabelDatabase.District", b =>
                {
                    b.Property<string>("DistrictId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PlanetId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistrictId");

                    b.HasIndex("PlanetId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("BabelDatabase.Empire", b =>
                {
                    b.Property<int>("EmpireId")
                        .HasColumnType("int");

                    b.Property<string>("EconGmData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralAssembly")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalOutput")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PopsimGmData")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmpireId");

                    b.ToTable("Empires");
                });

            modelBuilder.Entity("BabelDatabase.Fleet", b =>
                {
                    b.Property<int>("FleetId")
                        .HasColumnType("int");

                    b.Property<int?>("EmpireId")
                        .HasColumnType("int");

                    b.Property<int?>("EmpireId1")
                        .HasColumnType("int");

                    b.Property<double>("MilitaryPower")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerID")
                        .HasColumnType("int");

                    b.Property<int>("SystemId")
                        .HasColumnType("int");

                    b.HasKey("FleetId");

                    b.HasIndex("EmpireId");

                    b.HasIndex("EmpireId1");

                    b.HasIndex("OwnerID");

                    b.ToTable("Fleets");
                });

            modelBuilder.Entity("BabelDatabase.GalacticObject", b =>
                {
                    b.Property<int>("GalacticObjectId")
                        .HasColumnType("int");

                    b.Property<int?>("EmpireId")
                        .HasColumnType("int");

                    b.Property<string>("Hyperlanes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PosX")
                        .HasColumnType("real");

                    b.Property<float>("PosY")
                        .HasColumnType("real");

                    b.Property<int>("StarbaseId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GalacticObjectId");

                    b.HasIndex("EmpireId");

                    b.HasIndex("StarbaseId")
                        .IsUnique();

                    b.ToTable("GalacticObjects");
                });

            modelBuilder.Entity("BabelDatabase.GameState", b =>
                {
                    b.Property<int>("GameStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrentYear")
                        .HasColumnType("int");

                    b.Property<int>("SecondsToMidnight")
                        .HasColumnType("int");

                    b.HasKey("GameStateId");

                    b.ToTable("GameState");

                    b.HasData(
                        new
                        {
                            GameStateId = 1,
                            CurrentYear = 2500,
                            SecondsToMidnight = 10800
                        });
                });

            modelBuilder.Entity("BabelDatabase.Graveyard", b =>
                {
                    b.Property<string>("ChannelId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ServerId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChannelId");

                    b.ToTable("Graveyards");
                });

            modelBuilder.Entity("BabelDatabase.InfrastructureData", b =>
                {
                    b.Property<string>("InfraStructureDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("GdpPerInfrastructure")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Infrastructures")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InfraStructureDataId");

                    b.ToTable("InfrastructureData");
                });

            modelBuilder.Entity("BabelDatabase.Military", b =>
                {
                    b.Property<string>("RevolutionaryGuardId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MilitaryFactions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MilitaryGroups")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("MilitaryPoliticisation")
                        .HasColumnType("real");

                    b.HasKey("RevolutionaryGuardId");

                    b.ToTable("Militaries");
                });

            modelBuilder.Entity("BabelDatabase.Party", b =>
                {
                    b.Property<string>("PartyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LowerPartyAffinity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LowerPartyMembership")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PopGroupEnlistment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpperPartyAffinity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpperPartyMembership")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("UpperPartyPercentage")
                        .HasColumnType("real");

                    b.HasKey("PartyId");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("BabelDatabase.Planet", b =>
                {
                    b.Property<int>("PlanetId")
                        .HasColumnType("int");

                    b.Property<int?>("ControllerId")
                        .HasColumnType("int");

                    b.Property<string>("EconGmData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExecutiveAlignmentAlignmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("GalacticObjectId")
                        .HasColumnType("int");

                    b.Property<string>("LegislativeAlignmentAlignmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Output")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("PartyAlignmentAlignmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlanetClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanetDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PopsimGmData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Population")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("PlanetId");

                    b.HasIndex("ControllerId");

                    b.HasIndex("ExecutiveAlignmentAlignmentId");

                    b.HasIndex("GalacticObjectId");

                    b.HasIndex("LegislativeAlignmentAlignmentId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PartyAlignmentAlignmentId");

                    b.ToTable("Planets");
                });

            modelBuilder.Entity("BabelDatabase.PlanetarySystem", b =>
                {
                    b.Property<string>("SystemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Colour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Lat")
                        .HasColumnType("real");

                    b.Property<float>("Lng")
                        .HasColumnType("real");

                    b.Property<int>("PlanetId")
                        .HasColumnType("int");

                    b.HasKey("SystemId");

                    b.HasIndex("PlanetId")
                        .IsUnique();

                    b.ToTable("PlanetarySystems");
                });

            modelBuilder.Entity("BabelDatabase.PlayerStaffAction", b =>
                {
                    b.Property<string>("PlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StaffActionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PlayerId", "StaffActionId");

                    b.ToTable("PlayerStaffAction");
                });

            modelBuilder.Entity("BabelDatabase.Pop", b =>
                {
                    b.Property<int>("PopId")
                        .HasColumnType("int");

                    b.Property<float>("Happiness")
                        .HasColumnType("real");

                    b.Property<string>("Job")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlanetId")
                        .HasColumnType("int");

                    b.Property<float>("Power")
                        .HasColumnType("real");

                    b.Property<string>("Species")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Strata")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PopId");

                    b.HasIndex("PlanetId");

                    b.ToTable("Pops");
                });

            modelBuilder.Entity("BabelDatabase.PopsimGlobalEthicGroup", b =>
                {
                    b.Property<string>("PopsimGlobalEthicGroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CooperationCompetition")
                        .HasColumnType("int");

                    b.Property<int>("DemocracyAuthority")
                        .HasColumnType("int");

                    b.Property<int>("FederalismCentralism")
                        .HasColumnType("int");

                    b.Property<int>("GlobalismIsolationism")
                        .HasColumnType("int");

                    b.Property<int>("MilitarismPacifism")
                        .HasColumnType("int");

                    b.Property<int>("MonoculturalismMulticulturalism")
                        .HasColumnType("int");

                    b.Property<float>("PartyEnlistmentModifier")
                        .HasColumnType("real");

                    b.Property<int>("PartyInvolvementFactor")
                        .HasColumnType("int");

                    b.Property<string>("PopsimGlobalEthicGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProgressivismTraditionalism")
                        .HasColumnType("int");

                    b.Property<float>("Radicalisation")
                        .HasColumnType("real");

                    b.Property<int>("SecularismSpiritualism")
                        .HasColumnType("int");

                    b.Property<int>("SecurityFreedom")
                        .HasColumnType("int");

                    b.HasKey("PopsimGlobalEthicGroupId");

                    b.ToTable("PopsimGlobalEthicGroups");
                });

            modelBuilder.Entity("BabelDatabase.PopsimPlanetEthicGroup", b =>
                {
                    b.Property<string>("PopsimPlanetEthicGroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("MembersOnPlanet")
                        .HasColumnType("bigint");

                    b.Property<float>("Percentage")
                        .HasColumnType("real");

                    b.Property<int>("PlanetId")
                        .HasColumnType("int");

                    b.Property<string>("PopsimGlobalEthicGroupId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PopsimPlanetEthicGroupId");

                    b.HasIndex("PlanetId");

                    b.HasIndex("PopsimGlobalEthicGroupId");

                    b.ToTable("PopsimPlanetEthicGroup");
                });

            modelBuilder.Entity("BabelDatabase.Ship", b =>
                {
                    b.Property<int>("ShipId")
                        .HasColumnType("int");

                    b.Property<int>("FleetId")
                        .HasColumnType("int");

                    b.Property<string>("ShipName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShipId");

                    b.HasIndex("FleetId");

                    b.ToTable("Ships");
                });

            modelBuilder.Entity("BabelDatabase.Species", b =>
                {
                    b.Property<string>("SpeciesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SpeciesDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpeciesName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpeciesId");

                    b.ToTable("Species");

                    b.HasData(
                        new
                        {
                            SpeciesId = "1",
                            SpeciesName = "Human"
                        },
                        new
                        {
                            SpeciesId = "2",
                            SpeciesName = "Zelvan"
                        },
                        new
                        {
                            SpeciesId = "3",
                            SpeciesName = "Liaran"
                        });
                });

            modelBuilder.Entity("BabelDatabase.StaffAction", b =>
                {
                    b.Property<string>("StaffActionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TimeStarted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffActionId");

                    b.HasIndex("OwnerId");

                    b.ToTable("StaffActions");
                });

            modelBuilder.Entity("BabelDatabase.StaffActionPost", b =>
                {
                    b.Property<string>("StaffActionPostId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffActionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TimePosted")
                        .HasColumnType("datetime2");

                    b.HasKey("StaffActionPostId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("StaffActionId");

                    b.ToTable("StaffActionPosts");
                });

            modelBuilder.Entity("BabelDatabase.StaffStaffAction", b =>
                {
                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StaffActionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StaffId", "StaffActionId");

                    b.HasIndex("StaffActionId");

                    b.ToTable("StaffStaffAction");
                });

            modelBuilder.Entity("BabelDatabase.Starbase", b =>
                {
                    b.Property<int>("StarbaseId")
                        .HasColumnType("int");

                    b.Property<string>("Buildings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FleetId")
                        .HasColumnType("int");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modules")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Owner")
                        .HasColumnType("int");

                    b.HasKey("StarbaseId");

                    b.HasIndex("FleetId")
                        .IsUnique();

                    b.ToTable("Starbases");
                });

            modelBuilder.Entity("BabelDatabase.VoteEntry", b =>
                {
                    b.Property<string>("VoteEntryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("Vote")
                        .HasColumnType("int");

                    b.Property<decimal>("VoteMessageId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("VoteEntryId");

                    b.HasIndex("VoteMessageId");

                    b.ToTable("VoteEntries");
                });

            modelBuilder.Entity("BabelDatabase.VoteMessage", b =>
                {
                    b.Property<decimal>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<bool>("Anonymous")
                        .HasColumnType("bit");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("CreatorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<long>("EndTime")
                        .HasColumnType("bigint");

                    b.Property<long>("TimeSpan")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("MessageId");

                    b.ToTable("VoteMessages");
                });

            modelBuilder.Entity("BabelDatabase.AlignmentClique", b =>
                {
                    b.HasOne("BabelDatabase.Alignment", "Alignment")
                        .WithMany("AlignmentClique")
                        .HasForeignKey("AlignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabelDatabase.Clique", "Clique")
                        .WithMany("Alignments")
                        .HasForeignKey("CliqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alignment");

                    b.Navigation("Clique");
                });

            modelBuilder.Entity("BabelDatabase.AlignmentSpending", b =>
                {
                    b.HasOne("BabelDatabase.Alignment", "Alignment")
                        .WithMany()
                        .HasForeignKey("AlignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabelDatabase.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabelDatabase.Clique", "Clique")
                        .WithMany()
                        .HasForeignKey("CliqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabelDatabase.PopsimGlobalEthicGroup", "GlobalTarget")
                        .WithMany()
                        .HasForeignKey("GlobalTargetId");

                    b.HasOne("BabelDatabase.PopsimGlobalEthicGroup", "PlanetTarget")
                        .WithMany()
                        .HasForeignKey("PlanetTargetId");

                    b.Navigation("Alignment");

                    b.Navigation("Character");

                    b.Navigation("Clique");

                    b.Navigation("GlobalTarget");

                    b.Navigation("PlanetTarget");
                });

            modelBuilder.Entity("BabelDatabase.Army", b =>
                {
                    b.HasOne("BabelDatabase.Empire", "Owner")
                        .WithMany("Armies")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BabelDatabase.Planet", "Planet")
                        .WithMany()
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("BabelDatabase.Building", b =>
                {
                    b.HasOne("BabelDatabase.Planet", "Planet")
                        .WithMany("Buildings")
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("BabelDatabase.Character", b =>
                {
                    b.HasOne("BabelDatabase.Committee", null)
                        .WithMany("CommitteeMembers")
                        .HasForeignKey("CommitteeId");

                    b.HasOne("BabelDatabase.DiscordUser", "DiscordUser")
                        .WithMany("Characters")
                        .HasForeignKey("DiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabelDatabase.Species", "Species")
                        .WithMany()
                        .HasForeignKey("SpeciesId");

                    b.Navigation("DiscordUser");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("BabelDatabase.CharacterDeathTimer", b =>
                {
                    b.HasOne("BabelDatabase.Character", "Character")
                        .WithOne()
                        .HasForeignKey("BabelDatabase.CharacterDeathTimer", "CharacterId");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("BabelDatabase.CliqueInvite", b =>
                {
                    b.HasOne("BabelDatabase.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabelDatabase.Clique", "Clique")
                        .WithMany()
                        .HasForeignKey("CliqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Clique");
                });

            modelBuilder.Entity("BabelDatabase.CliqueMemberCharacter", b =>
                {
                    b.HasOne("BabelDatabase.Clique", "Clique")
                        .WithMany("CliqueMemberCharacter")
                        .HasForeignKey("CliqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabelDatabase.Character", "Member")
                        .WithMany("Cliques")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clique");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("BabelDatabase.CliqueOfficerCharacter", b =>
                {
                    b.HasOne("BabelDatabase.Clique", "Clique")
                        .WithMany("CliqueOfficerCharacter")
                        .HasForeignKey("CliqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabelDatabase.Character", "Officer")
                        .WithMany()
                        .HasForeignKey("OfficerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clique");

                    b.Navigation("Officer");
                });

            modelBuilder.Entity("BabelDatabase.CustomSpending", b =>
                {
                    b.HasOne("BabelDatabase.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabelDatabase.Clique", "Clique")
                        .WithMany()
                        .HasForeignKey("CliqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Clique");
                });

            modelBuilder.Entity("BabelDatabase.District", b =>
                {
                    b.HasOne("BabelDatabase.Planet", "Planet")
                        .WithMany("Districts")
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("BabelDatabase.Fleet", b =>
                {
                    b.HasOne("BabelDatabase.Empire", null)
                        .WithMany("MiningStations")
                        .HasForeignKey("EmpireId");

                    b.HasOne("BabelDatabase.Empire", null)
                        .WithMany("ResearchStations")
                        .HasForeignKey("EmpireId1");

                    b.HasOne("BabelDatabase.Empire", "Owner")
                        .WithMany("Fleets")
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BabelDatabase.GalacticObject", b =>
                {
                    b.HasOne("BabelDatabase.Empire", null)
                        .WithMany("GalacticObjects")
                        .HasForeignKey("EmpireId");

                    b.HasOne("BabelDatabase.Starbase", "Starbase")
                        .WithOne()
                        .HasForeignKey("BabelDatabase.GalacticObject", "StarbaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Starbase");
                });

            modelBuilder.Entity("BabelDatabase.Planet", b =>
                {
                    b.HasOne("BabelDatabase.Empire", "Controller")
                        .WithMany()
                        .HasForeignKey("ControllerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BabelDatabase.Alignment", "ExecutiveAlignment")
                        .WithMany()
                        .HasForeignKey("ExecutiveAlignmentAlignmentId");

                    b.HasOne("BabelDatabase.GalacticObject", "GalacticObject")
                        .WithMany("Planets")
                        .HasForeignKey("GalacticObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabelDatabase.Alignment", "LegislativeAlignment")
                        .WithMany()
                        .HasForeignKey("LegislativeAlignmentAlignmentId");

                    b.HasOne("BabelDatabase.Empire", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BabelDatabase.Alignment", "PartyAlignment")
                        .WithMany()
                        .HasForeignKey("PartyAlignmentAlignmentId");

                    b.Navigation("Controller");

                    b.Navigation("ExecutiveAlignment");

                    b.Navigation("GalacticObject");

                    b.Navigation("LegislativeAlignment");

                    b.Navigation("Owner");

                    b.Navigation("PartyAlignment");
                });

            modelBuilder.Entity("BabelDatabase.PlanetarySystem", b =>
                {
                    b.HasOne("BabelDatabase.Planet", "Planet")
                        .WithOne()
                        .HasForeignKey("BabelDatabase.PlanetarySystem", "PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("BabelDatabase.PlayerStaffAction", b =>
                {
                    b.HasOne("BabelDatabase.DiscordUser", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabelDatabase.StaffAction", "StaffAction")
                        .WithMany("Players")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("StaffAction");
                });

            modelBuilder.Entity("BabelDatabase.Pop", b =>
                {
                    b.HasOne("BabelDatabase.Planet", "Planet")
                        .WithMany("Pops")
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("BabelDatabase.PopsimPlanetEthicGroup", b =>
                {
                    b.HasOne("BabelDatabase.Planet", "Planet")
                        .WithMany("PlanetGroups")
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabelDatabase.PopsimGlobalEthicGroup", "PopsimGlobalEthicGroup")
                        .WithMany("PlanetaryEthicGroups")
                        .HasForeignKey("PopsimGlobalEthicGroupId");

                    b.Navigation("Planet");

                    b.Navigation("PopsimGlobalEthicGroup");
                });

            modelBuilder.Entity("BabelDatabase.Ship", b =>
                {
                    b.HasOne("BabelDatabase.Fleet", "Fleet")
                        .WithMany("Ships")
                        .HasForeignKey("FleetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fleet");
                });

            modelBuilder.Entity("BabelDatabase.StaffAction", b =>
                {
                    b.HasOne("BabelDatabase.DiscordUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BabelDatabase.StaffActionPost", b =>
                {
                    b.HasOne("BabelDatabase.DiscordUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabelDatabase.StaffAction", "StaffAction")
                        .WithMany("StaffActionPosts")
                        .HasForeignKey("StaffActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("StaffAction");
                });

            modelBuilder.Entity("BabelDatabase.StaffStaffAction", b =>
                {
                    b.HasOne("BabelDatabase.StaffAction", "StaffAction")
                        .WithMany("Staff")
                        .HasForeignKey("StaffActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabelDatabase.DiscordUser", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("StaffAction");
                });

            modelBuilder.Entity("BabelDatabase.Starbase", b =>
                {
                    b.HasOne("BabelDatabase.Fleet", "StarbaseFleet")
                        .WithOne()
                        .HasForeignKey("BabelDatabase.Starbase", "FleetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StarbaseFleet");
                });

            modelBuilder.Entity("BabelDatabase.VoteEntry", b =>
                {
                    b.HasOne("BabelDatabase.VoteMessage", "VoteMessage")
                        .WithMany("Votes")
                        .HasForeignKey("VoteMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VoteMessage");
                });

            modelBuilder.Entity("BabelDatabase.Alignment", b =>
                {
                    b.Navigation("AlignmentClique");
                });

            modelBuilder.Entity("BabelDatabase.Character", b =>
                {
                    b.Navigation("Cliques");
                });

            modelBuilder.Entity("BabelDatabase.Clique", b =>
                {
                    b.Navigation("Alignments");

                    b.Navigation("CliqueMemberCharacter");

                    b.Navigation("CliqueOfficerCharacter");
                });

            modelBuilder.Entity("BabelDatabase.Committee", b =>
                {
                    b.Navigation("CommitteeMembers");
                });

            modelBuilder.Entity("BabelDatabase.DiscordUser", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("BabelDatabase.Empire", b =>
                {
                    b.Navigation("Armies");

                    b.Navigation("Fleets");

                    b.Navigation("GalacticObjects");

                    b.Navigation("MiningStations");

                    b.Navigation("ResearchStations");
                });

            modelBuilder.Entity("BabelDatabase.Fleet", b =>
                {
                    b.Navigation("Ships");
                });

            modelBuilder.Entity("BabelDatabase.GalacticObject", b =>
                {
                    b.Navigation("Planets");
                });

            modelBuilder.Entity("BabelDatabase.Planet", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("Districts");

                    b.Navigation("PlanetGroups");

                    b.Navigation("Pops");
                });

            modelBuilder.Entity("BabelDatabase.PopsimGlobalEthicGroup", b =>
                {
                    b.Navigation("PlanetaryEthicGroups");
                });

            modelBuilder.Entity("BabelDatabase.StaffAction", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Staff");

                    b.Navigation("StaffActionPosts");
                });

            modelBuilder.Entity("BabelDatabase.VoteMessage", b =>
                {
                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
