// <auto-generated />
using BabelDatabase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BabelDatabase.Migrations
{
    [DbContext(typeof(BabelContext))]
    partial class BabelContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BabelDatabase.Character", b =>
                {
                    b.Property<string>("CharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CauseOfDeath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CharacterBio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscordUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PartyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SpeciesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("YearOfBirth")
                        .HasColumnType("int");

                    b.Property<int>("YearOfDeath")
                        .HasColumnType("int");

                    b.HasKey("CharacterId");

                    b.HasIndex("DiscordUserId");

                    b.HasIndex("PartyId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("BabelDatabase.DiscordUser", b =>
                {
                    b.Property<string>("DiscordUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActiveCharacterCharacterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActiveCharacterId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.HasKey("DiscordUserId");

                    b.HasIndex("ActiveCharacterCharacterId");

                    b.ToTable("DiscordUsers");
                });

            modelBuilder.Entity("BabelDatabase.PopsimParty", b =>
                {
                    b.Property<string>("PartyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PartyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PartyId");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("BabelDatabase.Species", b =>
                {
                    b.Property<string>("SpeciesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SpeciesName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpeciesId");

                    b.ToTable("Species");

                    b.HasData(
                        new
                        {
                            SpeciesId = "1",
                            SpeciesName = "Human"
                        },
                        new
                        {
                            SpeciesId = "2",
                            SpeciesName = "Zelvan"
                        });
                });

            modelBuilder.Entity("BabelDatabase.TimeToMidnight", b =>
                {
                    b.Property<int>("TimeToMidnightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SecondsToMidnight")
                        .HasColumnType("int");

                    b.HasKey("TimeToMidnightId");

                    b.ToTable("TimeToMidnight");

                    b.HasData(
                        new
                        {
                            TimeToMidnightId = 1,
                            SecondsToMidnight = 10800
                        });
                });

            modelBuilder.Entity("BabelDatabase.Year", b =>
                {
                    b.Property<int>("YearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrentYear")
                        .HasColumnType("int");

                    b.HasKey("YearId");

                    b.ToTable("Year");
                });

            modelBuilder.Entity("BabelDatabase.Character", b =>
                {
                    b.HasOne("BabelDatabase.DiscordUser", "DiscordUser")
                        .WithMany("Characters")
                        .HasForeignKey("DiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabelDatabase.PopsimParty", "Party")
                        .WithMany("Members")
                        .HasForeignKey("PartyId");

                    b.HasOne("BabelDatabase.Species", "Species")
                        .WithMany()
                        .HasForeignKey("SpeciesId");

                    b.Navigation("DiscordUser");

                    b.Navigation("Party");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("BabelDatabase.DiscordUser", b =>
                {
                    b.HasOne("BabelDatabase.Character", "ActiveCharacter")
                        .WithMany()
                        .HasForeignKey("ActiveCharacterCharacterId");

                    b.Navigation("ActiveCharacter");
                });

            modelBuilder.Entity("BabelDatabase.DiscordUser", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("BabelDatabase.PopsimParty", b =>
                {
                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
